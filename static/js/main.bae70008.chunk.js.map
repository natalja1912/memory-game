{"version":3,"sources":["components/Card.js","components/Timer.js","utils/cards.js","App.js","index.js"],"names":["Card","card","isOpened","onClick","className","text","Timer","expiryTimestamp","pauseTimer","startNewGame","useTimer","onExpire","console","warn","seconds","minutes","start","restart","pause","useEffect","style","display","alignItems","margin","fontSize","time","Date","setSeconds","getSeconds","getCards","cardsNumber","cards","i","push","id","App","useState","setCardsNumber","openedCards","setOpenedCards","shownCards","setShownCards","isTimerRunning","setTimerRunning","length","setTimeout","oneCardShownTime","newCards","filter","item","checkCards","sort","Math","random","cardsShuffle","type","min","max","value","onChange","e","target","onNumberInputChange","map","some","prev","onCardClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bae70008.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nexport default function Card({ card, isOpened, onClick }) {\r\n  function onCardClick() {\r\n    onClick(card);\r\n  }\r\n\r\n  return (\r\n    <div className={`card ${isOpened && `card_active`}`} onClick={onCardClick}>\r\n      {isOpened && card.text}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useTimer } from \"react-timer-hook\";\r\n\r\nexport default function Timer({ expiryTimestamp, pauseTimer, startNewGame }) {\r\n  const { seconds, minutes, start, restart, pause } = useTimer({\r\n    expiryTimestamp,\r\n    onExpire: () => console.warn(\"onExpire called\")\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!pauseTimer) {\r\n      pause();\r\n    }\r\n  }, [pauseTimer]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        margin: 0\r\n      }}\r\n    >\r\n      <div style={{ fontSize: \"20px\", margin: \"10px\" }}>\r\n        <span>{minutes}</span>:<span>{seconds}</span>\r\n      </div>\r\n      <button\r\n        className=\"App__button\"\r\n        onClick={() => {\r\n          start();\r\n          startNewGame();\r\n        }}\r\n      >\r\n        СТАРТ\r\n      </button>\r\n      <button\r\n        className=\"App__button\"\r\n        onClick={() => {\r\n          const time = new Date();\r\n          time.setSeconds(time.getSeconds() + 600);\r\n          restart(time);\r\n          startNewGame();\r\n        }}\r\n      >\r\n        НОВАЯ ИГРА\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","function getCards(cardsNumber) {\r\n  let cards = [];\r\n  for (let i = 1; i <= cardsNumber; i++) {\r\n    if (i > cardsNumber / 2) {\r\n      cards.push({ id: i, text: i - cardsNumber / 2 });\r\n    } else cards.push({ id: i, text: i });\r\n  }\r\n  return cards;\r\n}\r\n\r\nexport default getCards;\r\n","import { useState, useEffect } from \"react\";\nimport Card from \"./components/Card\";\nimport Timer from \"./components/Timer\";\nimport getCards from \"./utils/cards\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [cardsNumber, setCardsNumber] = useState(16);\n  const [openedCards, setOpenedCards] = useState([]);\n  const [shownCards, setShownCards] = useState([]);\n  const [isTimerRunning, setTimerRunning] = useState(true);\n\n  /*время показа 1 карточки в сек */\n  const oneCardShownTime = 5;\n\n  /*настройки таймера */\n  const time = new Date();\n  time.setSeconds(time.getSeconds() + 600); // 10минутный таймер\n\n  function cardsShuffle(cards) {\n    return cards.sort(() => Math.random() - 0.5);\n  }\n\n  /*задаем число карточек для игры */\n  const cards = getCards(cardsNumber);\n\n  /*при нажатии на кнопку новая игра первоначальные\n   карточки перемешиваются и выводятся на экран,\n   таймер перезапускается */\n  function startNewGame() {\n    setTimerRunning(true);\n    let newCards = cardsShuffle(cards);\n    setShownCards(newCards);\n  }\n\n  /*проверка совпадения 2х открытых карточек */\n  function checkCards() {\n    if (openedCards[0].text === openedCards[1].text) {\n      let newCards = shownCards.filter(\n        (item) => item.text !== openedCards[0].text\n      );\n      /*вывод на экран карточек за исключением \n        2х одинаковых с задержкой 2 сек */\n      setTimeout(() => setShownCards(newCards), 2000);\n    }\n    if (shownCards.length !== 2) {\n      setTimeout(() => setOpenedCards([]), 1000);\n    }\n  }\n\n  /*проверка числа открытых карточек */\n  useEffect(() => {\n    if (openedCards.length === 1) {\n      setTimeout(() => setOpenedCards([]), oneCardShownTime * 1000);\n    }\n    if (openedCards.length > 1) {\n      checkCards();\n    }\n  }, [openedCards]);\n\n  /*остановка таймера, если число карточек для отображения\n  на экране равно нулю */\n  useEffect(() => {\n    if (shownCards.length === 0) {\n      setTimerRunning(false);\n    }\n  }, [shownCards]);\n\n  function onCardClick(card) {\n    if (openedCards.length < 2) {\n      setOpenedCards((prev) => [...prev, card]);\n    }\n  }\n\n  function onNumberInputChange(e) {\n    setCardsNumber(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"App__btn-group\">\n        <Timer\n          pauseTimer={isTimerRunning}\n          expiryTimestamp={time}\n          startNewGame={startNewGame}\n        />\n      </div>\n      <label>\n        Введите количество карточек\n        <input\n          className=\"App__number\"\n          type=\"number\"\n          min=\"4\" max=\"50\"\n          value={cardsNumber}\n          onChange={(e) => onNumberInputChange(e)}\n        />\n      </label>\n      <ul className=\"cards-list\">\n        {shownCards.map((card) => (\n          <li>\n            <Card\n              key={card.id}\n              isOpened={openedCards.some((item) => item.id === card.id)}\n              card={card}\n              onClick={(card) => onCardClick(card)}\n            />\n          </li>\n        ))}{\" \"}\n      </ul>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}